#!/usr/bin/env python
"""
Copyright 2018 Akamai Technologies, Inc. All Rights Reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
"""

'''
Provides a CLI-like functionality for the mPulse Query API
'''
import sys
import config
if sys.version_info[0] >= 3:
     # python3
     from configparser import ConfigParser
     import http.client as http_client
else:
     # python2.7
     from ConfigParser import ConfigParser
     import httplib as http_client

import argparse
import logging
import requests
import json
import mpulse_helper
import os

#setup logging
logger = logging.getLogger("mpulse")
logging.basicConfig()
logger.addHandler(logging.StreamHandler())
logging.getLogger().setLevel(logging.ERROR)


def getApiResponse(token, args):
	'''
		Single wrapper for all the calls for mPulse Query API.
		It takes the security token and the incoming arguments and the output is a JSON response.
	'''
	base_url = "https://mpulse.soasta.com/concerto/mpulse/api/v2/"

	# extract arguments from the command line, including the command type
	arguments = {}
	if 'args' in args and args.args != None or args.args!="":		
		for each_argument in args.args:
			params = each_argument.strip().split("=")
			if len(params) == 2:
				arguments[params[0]] = params[1]
	if 'type' not in arguments:
		arguments['type'] = "summary"

	function = '/' + arguments['type']
	
	query_arguments = mpulse_helper.get_query_date(arguments)
	query_arguments['format'] = 'json'
	
	# cleanup the list of "arguments" to remove the ones we already used
	mpulse_helper.cleanup_arguments(arguments)	
	#merge the arguments dictionary to query_arguments dictionary. we'll use 'query_arguments' to build the final set of query strings
	query_arguments.update(arguments)	
	logger.debug("Arguments currently in list: " + str(query_arguments))

	# add the necessary auth token header
	headers = {"Authentication": token["token"]}

	#build the final api endpoint
	api_endpoint = base_url + args.api + function + "?" + "&".join(mpulse_helper.build_query_string(query_arguments))
	
	logging.debug("API URL: " + api_endpoint)
	response = {}

	#make the call and send back the response
	try:
		http_response = requests.get(api_endpoint, headers = headers)
		if http_response.status_code == 200:			
			response = http_response.json()		
			logger.info(json.dumps(response,indent=2))
		else:
			logger.error("HTTP Error" + str(http_response.status_code))	
			logger.error(http_response.read())
	except Exception as e:
		logging.error(str(e))
	
	return response		

def get_prog_name():
    prog = os.path.basename(sys.argv[0])
    if os.getenv("AKAMAI_CLI"):
        prog = "akamai mpulse"
    return prog


def cli():
    prog = get_prog_name()
    if len(sys.argv) == 1:
        prog += " [command]"

    parser = argparse.ArgumentParser(
        description='CLI for mPulse Query API. For more information about the API, please refer to https://developer.akamai.com/api/web_performance/mpulse_query/v2.html',
        add_help=False,
        prog=prog)
    parser.add_argument('--config', help='mPulse configuration file containing the user\'s API key (deault=~/.mpulse)',default="~/.mpulse")
    parser.add_argument('--section', help='Section within the config file containing the credentials (default=[mpulse])',default='mpulse')
    parser.add_argument('--api', help='API key of the app',required=False) 
    parser.add_argument('--timer', help='The timer to report (default=page load time)', default='PageLoad')
    #gather up reminder
    parser.add_argument('args', nargs=argparse.REMAINDER)

    args = parser.parse_args()
    if len(sys.argv) <= 1:
        parser.print_help()
        return 0

    if 'api' not in args or args.api=="":
    	parser.print_help()
    	return 0

    logger.debug('Configuration file: ' + args.config)
    logger.debug('Configuration section: ' + args.section)
    logger.debug(args)

    ## first create a security token
    token = config.getToken(args.config,args.section)    
    logger.debug(token)  

    ## now fire the API call
    if token!= {}: 
	    response = getApiResponse(token, args)	    
	    if response!={}:    
	    	print(json.dumps(response, indent=4))
	    else:
	    	print(str(response))

    return 0



if __name__=="__main__":    
	status = 0	
	try:
		status = cli()
		exit(status)
	except KeyboardInterrupt:
		exit(1)
