#!/usr/bin/env python3
"""
Copyright 2018 Akamai Technologies, Inc. All Rights Reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
"""

'''
Akamai CLI interface to mPulse Query API
'''
import sys
import os
import argparse
import config
import json
import requests
import urllib

import mpulse_helper

import logging
log = logging.getLogger(__name__)

#
# Generate help message manually.
#
# Automatic generation by many libraries just don't work out as they make adding
# examples and notes more difficult, which is a key for a smooth experience.
# So, just try to write a clean help message here.
#
def usage():
    p = os.path.basename(sys.argv[0])
    return f"""
{p} - Akamai CLI for mPulse
Usage: {p} --api <KEY> [options]
Options:
  --debug <level>: Show debug output (INFO/ERROR/DEBUG)
  --config: Config file to use (~/.mpulse)
  --section: Section in config file to use ([mpulse])
  --api KEY: mPulse app API key to idenfity the domain
  --type <name>: Report type to show (summary/timers-metrics/histogram/page-groups/browsers/...)
  --timer <name>: Add report on given timer (PageLoad/DomLoad/DomReady/LargestContentfulPaint/FirstInputDelay/...)
  --metric <name>: Add report on given metric (Beacons/AvgSesionDuration/AvgSessionLength/BounceRate/...)
  --date <date>: Date to report on
  --date_start <datetime>: Start date of the period
  --date_end <datetime>: End date of the period
  --date_comparator <spec>: Either of Today/LastHour/Last(3|12|24)Hours/ThisWeek/ThisMonth/...

Examples:
  $ KEY=24E42-E180-11EC-9EA7-73471
  $ {p} --api $KEY --timer PageLoad --date '2022-02-02'
  $ {p} --api $KEY --timer PageLoad --date_start '2022-02-01' --date_end '2022-03-01'
  $ {p} --api $KEY --timer PageLoad --date-comparator LastHour
  $ {p} --api $KEY --type timers-metrics --timer PageLoad --timer DomLoad --metric Beacons --metric BounceRate

NOTES:
  - For report types, see https://developer.akamai.com/api/web_performance/mpulse_query/v2.html
  - For timer/metric names, see https://techdocs.akamai.com/mpulse/reference/get-timers-metrics
  - Some report types can only include a single timer/metric in each report.
""".lstrip()

def help():
  sys.stderr.write(usage())
  sys.exit(0)

def buildApiArgs(opt):
    query_args = [('format', 'json')]

    if opt.timer:
        query_args += [('timer', i) for i in opt.timer]

    if opt.metric:
        query_args += [('metric', i) for i in opt.metric]

    if opt.date:
        query_args += [('date', opt.date)]
    else:
        if opt.date_start:
            query_args += [('date-start', opt.date_start)]
        if opt.date_end:
            query_args += [('date-end', opt.date_end)]
        if opt.date_start and opt.date_end:
            query_args += [('date-comparator', 'Between')]
        elif opt.date_comparator:
            query_args += [('date-comparator', opt.date_comparator)]

    return query_args

def buildApiUrl(opt):
    BASE_URL = "https://mpulse.soasta.com/concerto/mpulse/api/v2/"
    query_args = buildApiArgs(opt)
    log.debug("query args: " + str(query_args))

    endpoint_url = BASE_URL + opt.api + '/' + opt.type + "?" + urllib.parse.urlencode(query_args)
    return endpoint_url

def getApiResponse(opt, token):
    '''Calls an mPulse Query API with given auth token.
On success, returns a value object built from a JSON response.
'''

    # build api endpoint
    api_endpoint = buildApiUrl(opt)
    logging.debug("API URL: " + api_endpoint)

    # make the call and send back the response
    response = None
    try:
        # add the necessary auth token header
        headers = {"Authentication": token["token"]}

        http_response = requests.get(api_endpoint, headers = headers)
        log.debug(http_response.content)

        if http_response.status_code == 200:
            response = http_response.json()
        else:
            log.error("HTTP Error" + str(http_response.status_code))
            log.error(http_response.read())
    except Exception as e:
        logging.error(str(e))

    return response

def cli():
    ap = argparse.ArgumentParser()
    ap.print_help = help
    ap.add_argument('--debug', default='INFO')
    ap.add_argument('--config', default="~/.mpulse")
    ap.add_argument('--section', default='mpulse')
    ap.add_argument('--json', action='store_true')
    ap.add_argument('--api', required=True)
    ap.add_argument('--type', default='summary')
    ap.add_argument('--timer', action='append')
    ap.add_argument('--metric', action='append')
    ap.add_argument('--date')
    ap.add_argument('--date_start')
    ap.add_argument('--date_end')
    ap.add_argument('--date-comparator')
    ap.add_argument('args', nargs='*')

    opt = ap.parse_args()
    logging.basicConfig(level=eval('logging.' + opt.debug))

    # use default date if not set
    if not any([opt.date, opt.date_start, opt.date_end, opt.date_comparator]):
        opt.date_comparator = 'LastHour'
    elif all([opt.date_start, opt.date_end]):
        opt.date_comparator = 'Between'

    # create a security token
    token = config.getToken(opt.config, opt.section)
    log.debug(token)

    # fire the API call
    response = getApiResponse(opt, token)
    if response:
        mpulse_helper.print_response(opt, response)

    return 0

if __name__=="__main__":    
    sys.exit(cli())
